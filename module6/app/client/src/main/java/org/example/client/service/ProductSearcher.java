package org.example.client.service;

import io.confluent.kafka.serializers.AbstractKafkaSchemaSerDeConfig;
import io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.CommonClientConfigs;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.config.SaslConfigs;
import org.apache.kafka.common.config.SslConfigs;
import org.apache.kafka.common.config.TopicConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.example.client.config.ServiceProperties;
import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Paths;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutionException;
import java.util.stream.Stream;

/**
 * Look up product by name in product file generated by file sink connector.
 * For example, if product name is "Кроссовки MOOCIE" we look up string "name=Кроссовки MOOCIE"
 * and output all matching lines.
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class ProductSearcher {
    private final ServiceProperties serviceProperties;

    public List<String> find(String productName) {
        registerSearchRequest(productName);
        String pattern = "name="+productName;
        try (Stream<String> lines = java.nio.file.Files.lines(Paths.get(serviceProperties.getProductFile()))) {
            return lines.filter(line -> line.contains(pattern)).toList();
        } catch (IOException e) {
            log.error("failed to read product file {}", serviceProperties.getProductFile(), e);
            throw new RuntimeException(e);
        }
    }

    private void registerSearchRequest(String product) {
        final Properties properties = getKafkaProperties();
        try (KafkaProducer<String, String> producer = new KafkaProducer<>(properties)) {
            ProducerRecord<String, String> record = new ProducerRecord<>(serviceProperties.getClientRequestTopic(), null, product);
            try {
                producer.send(record).get();
            } catch (InterruptedException | ExecutionException e) {
                log.error("error registering search request {} in kafka topic {}", product, serviceProperties.getClientRequestTopic(), e);
                throw new RuntimeException(e);
            }
        }
    }

    @NotNull
    private Properties getKafkaProperties() {
        Properties properties = new Properties();
        properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, serviceProperties.getMasterBootstrapServers());
        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, KafkaJsonSchemaSerializer.class.getName());
        properties.put(TopicConfig.MIN_IN_SYNC_REPLICAS_CONFIG, "2");
        // SASL
        properties.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, "SASL_SSL");
        properties.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, serviceProperties.getSslTruststoreLocation());
        properties.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, serviceProperties.getSslTruststorePassword());
        properties.put(SaslConfigs.SASL_MECHANISM, "PLAIN");
        properties.put(SaslConfigs.SASL_JAAS_CONFIG, serviceProperties.getMasterSaslJaasConfig());
        // schema registry
        properties.put(AbstractKafkaSchemaSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, serviceProperties.getSchemaRegistryUrl());
        // register new schema ensuring backward compatibility
        properties.put(AbstractKafkaSchemaSerDeConfig.AUTO_REGISTER_SCHEMAS, true);
        // SSL
        properties.put("schema.registry.ssl.truststore.location", serviceProperties.getSslTruststoreLocation());
        properties.put("schema.registry.ssl.truststore.password", serviceProperties.getSslTruststorePassword());
        return properties;
    }
}
